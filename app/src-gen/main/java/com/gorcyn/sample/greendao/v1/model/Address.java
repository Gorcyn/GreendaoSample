package com.gorcyn.sample.greendao.v1.model;

import com.gorcyn.sample.greendao.v1.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.gorcyn.sample.greendao.v1.dao.AddressDao;
import com.gorcyn.sample.greendao.v1.dao.UserDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table ADDRESS.
 */
public class Address {

    private Long id;
    private int number;
    /** Not-null value. */
    private String street;
    /** Not-null value. */
    private String zipCode;
    /** Not-null value. */
    private String city;
    /** Not-null value. */
    private String country;
    private Long userId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient AddressDao myDao;

    private User user;
    private Long user__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Address() {
    }

    public Address(Long id) {
        this.id = id;
    }

    public Address(Long id, int number, String street, String zipCode, String city, String country, Long userId) {
        this.id = id;
        this.number = number;
        this.street = street;
        this.zipCode = zipCode;
        this.city = city;
        this.country = country;
        this.userId = userId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAddressDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public int getNumber() {
        return number;
    }

    public void setNumber(int number) {
        this.number = number;
    }

    /** Not-null value. */
    public String getStreet() {
        return street;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setStreet(String street) {
        this.street = street;
    }

    /** Not-null value. */
    public String getZipCode() {
        return zipCode;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setZipCode(String zipCode) {
        this.zipCode = zipCode;
    }

    /** Not-null value. */
    public String getCity() {
        return city;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setCity(String city) {
        this.city = city;
    }

    /** Not-null value. */
    public String getCountry() {
        return country;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setCountry(String country) {
        this.country = country;
    }

    public Long getUserId() {
        return userId;
    }

    public void setUserId(Long userId) {
        this.userId = userId;
    }

    /** To-one relationship, resolved on first access. */
    public User getUser() {
        Long __key = this.userId;
        if (user__resolvedKey == null || !user__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            User userNew = targetDao.load(__key);
            synchronized (this) {
                user = userNew;
            	user__resolvedKey = __key;
            }
        }
        return user;
    }

    public void setUser(User user) {
        synchronized (this) {
            this.user = user;
            userId = user == null ? null : user.getId();
            user__resolvedKey = userId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
